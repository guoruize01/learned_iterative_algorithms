# Create the basic problem structure.
prob = problems.ssc_problem(n=n, L=L, bps=bps, MC=MC, SNR_dB=8)


# # build a LAMP network to solve the problem and get the intermediate results so we can greedily extend and then refine(fine-tune)
layers = networks.build_LAMP4SSC(prob,T=8,untied=False)
print('Building layers ... done')
  

# plan the learning
# training_stages = train.setup_LAMP4SSCtraining(layers,prob,trinit=1e-3, refinements=(.5,) )
training_stages = train.setup_LAMP4SSCtraining(layers,prob,trinit=1e-3,refinements=(.5,.1,.01) )
print('Plan the learning ... done')

# do the learning (takes a while)
print('Do the learning (takes a while)')
# sess = train.do_LAMP4SSCtraining(training_stages,prob,'LAMP4SSC.npz',10,10,10)
sess = train.do_LAMP4SSCtraining(training_stages,prob,'LAMP4SSC.npz')


################################################################################
################################################################################

A = np.random.normal(size=(M, N), scale=1.0 / math.sqrt(M)).astype(np.float32)

################################################################################
################################################################################

ons_ = tf.matmul( z_, tf.linalg.diag(1 / (tau_ ** 2)))
ons_ = tf.matmul( ons_, tf.linalg.diag(prob.P - tf.norm(beta_, axis=0)**2/n))
z_ = prob.y_ - tf.matmul(A_, beta_) + ons_

s_ = beta_ + tf.matmul(B_, z_)

theta_ = tf.Variable(theta_init, name='theta_' + str(t))
tau_ = theta_ * tf.sqrt(tf.reduce_sum(z_ ** 2, axis=0) / n)

s1_ = prob.sqrtnPl * tf.matmul((s_ - prob.sqrtnPl), tf.linalg.diag(1 / (tau_ ** 2)))
s2_ = tf.reshape(tf.transpose(s1_), (-1, prob.B))
beta_rs_ = prob.sqrtnPl * tf.nn.softmax(s2_, axis=1)

beta_ = tf.transpose(tf.reshape(beta_rs_, [-1, N]))

layers.append(('LAMP for SSC non-linear T={0}\t'.format(t + 1), beta_, (theta_,)))